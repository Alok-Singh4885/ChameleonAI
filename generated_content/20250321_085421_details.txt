- {'name': 'Introduction to Functions', 'subtopics': [{'name': 'What is a Function?', 'subsubtopics': [{'name': 'Definition and purpose'}, {'name': 'Functions as "mini-programs"'}]}, {'name': 'Why Use Functions?', 'subsubtopics': [{'name': 'Modularity'}, {'name': 'Reusability'}, {'name': 'Readability'}, {'name': 'Abstraction'}]}, {'name': 'Function Call and Definition', 'subsubtopics': [{'name': 'Syntax for defining a function (def keyword)'}, {'name': 'Syntax for calling a function'}]}]}
- {'name': 'Function Arguments and Parameters', 'subtopics': [{'name': 'Positional Arguments', 'subsubtopics': [{'name': 'Order-based argument passing'}]}, {'name': 'Keyword Arguments', 'subsubtopics': [{'name': 'Name-based argument passing'}, {'name': 'Order-independent passing'}]}, {'name': 'Default Arguments', 'subsubtopics': [{'name': 'Parameters with default values'}, {'name': 'Usage when argument is not provided'}]}, {'name': 'Variable-Length Arguments (*args and **kwargs)', 'subsubtopics': [{'name': '*args (arbitrary positional arguments as tuple)'}, {'name': '**kwargs (arbitrary keyword arguments as dictionary)'}]}]}
- {'name': 'Return Values', 'subtopics': [{'name': 'The `return` Statement', 'subsubtopics': [{'name': 'Syntax and purpose'}, {'name': 'Returning single vs. multiple values (tuples)'}]}, {'name': 'Returning `None`', 'subsubtopics': [{'name': 'Implicit return when no `return` statement'}]}, {'name': 'Using Return Values', 'subsubtopics': [{'name': 'Assigning return values to variables'}, {'name': 'Using return values in expressions'}]}]}
- {'name': 'Scope and Lifetime of Variables', 'subtopics': [{'name': 'Local Scope', 'subsubtopics': [{'name': 'Variables defined inside a function'}, {'name': 'Accessibility and lifetime'}]}, {'name': 'Global Scope', 'subsubtopics': [{'name': 'Variables defined outside any function'}, {'name': 'Accessibility and lifetime'}]}, {'name': 'The `global` Keyword', 'subsubtopics': [{'name': 'Modifying global variables within a function'}]}, {'name': 'The `nonlocal` Keyword', 'subsubtopics': [{'name': 'Accessing variables in the nearest enclosing scope (nested functions)'}]}]}
- {'name': 'Lambda Functions (Anonymous Functions)', 'subtopics': [{'name': 'Syntax of Lambda Functions', 'subsubtopics': [{'name': 'lambda arguments: expression'}]}, {'name': 'Use Cases for Lambda Functions', 'subsubtopics': [{'name': 'With `map()`, `filter()`, and `sorted()`'}, {'name': 'As simple callbacks'}]}, {'name': 'Advantages and Disadvantages', 'subsubtopics': [{'name': 'Conciseness vs. readability'}]}]}
- {'name': 'Docstrings and Function Annotations', 'subtopics': [{'name': 'Docstrings', 'subsubtopics': [{'name': 'Syntax and conventions (triple quotes)'}, {'name': 'Documenting arguments, return values, and exceptions'}, {'name': 'Accessing docstrings using `help()` or `__doc__`'}]}, {'name': 'Function Annotations', 'subsubtopics': [{'name': 'Syntax for adding annotations'}, {'name': 'Type hinting (with tools like MyPy)'}]}]}

## {'name': 'Introduction to Functions', 'subtopics': [{'name': 'What is a Function?', 'subsubtopics': [{'name': 'Definition and purpose'}, {'name': 'Functions as "mini-programs"'}]}, {'name': 'Why Use Functions?', 'subsubtopics': [{'name': 'Modularity'}, {'name': 'Reusability'}, {'name': 'Readability'}, {'name': 'Abstraction'}]}, {'name': 'Function Call and Definition', 'subsubtopics': [{'name': 'Syntax for defining a function (def keyword)'}, {'name': 'Syntax for calling a function'}]}]}

## Introduction to Functions

**I. What is a Function?**

*   **Definition and Purpose:**
    *   A function is a block of organized, reusable code that performs a specific task.
    *   Its purpose is to encapsulate a set of instructions under a single name.
    *   Functions can accept inputs (arguments/parameters) and return outputs (return value).
*   **Functions as "Mini-Programs":**
    *   Think of a function as a smaller, self-contained program within your larger program.
    *   It has its own logic, variables (often local), and can execute independently.
    *   Breaks down complex tasks into manageable chunks.

**II. Why Use Functions?**

*   **Modularity:**
    *   Functions break down a large program into smaller, independent modules.
    *   Easier to develop, test, and debug individual components.
    *   Promotes a structured and organized codebase.
*   **Reusability:**
    *   Functions can be called multiple times from different parts of the program.
    *   Avoids code duplication and reduces redundancy.
    *   Write once, use many times.
*   **Readability:**
    *   Functions make code easier to understand by giving meaningful names to blocks of code.
    *   Improves code clarity and maintainability.
    *   Hides implementation details, focusing on what the code *does* rather than *how* it does it.
*   **Abstraction:**
    *   Functions hide the complex implementation details behind a simple interface.
    *   Users don't need to know *how* a function works, only *what* it does.
    *   Simplifies program design and reduces cognitive load.

**III. Function Call and Definition**

*   **Syntax for Defining a Function ( `def` keyword):**

    *   ```python
        def function_name(parameter1, parameter2, ...):
            """Docstring explaining what the function does."""
            # Code block to be executed
            # ...
            return value  # Optional return statement
        ```
    *   `def`: Keyword used to define a function.
    *   `function_name`: The name of the function (should be descriptive).
    *   `parameter1, parameter2, ...`:  Optional input parameters (can be zero or more).
    *   `:`:  Marks the beginning of the function's code block.
    *   `"""Docstring"""`:  Optional but highly recommended documentation string that explains the function's purpose, arguments, and return value.
    *   `return value`: Optional statement to return a value from the function. If omitted, the function implicitly returns `None`.
*   **Syntax for Calling a Function:**

    *   ```python
        result = function_name(argument1, argument2, ...)
        ```
    *   `function_name()`:  Invokes the function.
    *   `argument1, argument2, ...`:  The actual values passed to the function's parameters.  The order of arguments must match the order of parameters in the function definition (unless using keyword arguments).
    *   `result`: Variable to store the return value of the function (if any). If the function doesn't return anything, `result` will be assigned `None`.
    *   Example:
        ```python
        def add(x, y):
            return x + y

        sum_result = add(5, 3)  # Calling the function with arguments 5 and 3
        print(sum_result)  # Output: 8
        ```


## {'name': 'Function Arguments and Parameters', 'subtopics': [{'name': 'Positional Arguments', 'subsubtopics': [{'name': 'Order-based argument passing'}]}, {'name': 'Keyword Arguments', 'subsubtopics': [{'name': 'Name-based argument passing'}, {'name': 'Order-independent passing'}]}, {'name': 'Default Arguments', 'subsubtopics': [{'name': 'Parameters with default values'}, {'name': 'Usage when argument is not provided'}]}, {'name': 'Variable-Length Arguments (*args and **kwargs)', 'subsubtopics': [{'name': '*args (arbitrary positional arguments as tuple)'}, {'name': '**kwargs (arbitrary keyword arguments as dictionary)'}]}]}

Okay, here are notes on Function Arguments and Parameters, broken down by the subtopics and sub-subtopics you provided:

**I. Function Arguments and Parameters**

*   **Definition:**  Arguments are the actual values passed to a function when it's called (also called "actual parameters"). Parameters are the variables defined in the function definition that receive the arguments (also called "formal parameters").

**II. Positional Arguments**

*   **Definition:** Arguments passed to a function based on their position (order) in the function call.
    *   Rely on the order matching the order of parameters defined in the function.

    *   **Order-based argument passing:**
        *   The first argument in the function call is assigned to the first parameter in the function definition, the second to the second, and so on.
        *   If the order is incorrect, the function might produce unexpected results or errors.
        *   Example: `def my_function(x, y): ...`  `my_function(10, 20)`  (10 is assigned to x, 20 to y)

**III. Keyword Arguments**

*   **Definition:** Arguments passed to a function using the parameter name explicitly.

    *   **Name-based argument passing:**
        *   Specify the parameter name followed by an equals sign (=) and the value.
        *   Example: `my_function(x=10, y=20)`

    *   **Order-independent passing:**
        *   The order in which keyword arguments are passed doesn't matter because the parameter is explicitly specified.
        *   `my_function(y=20, x=10)` is equivalent to `my_function(x=10, y=20)`
        *   Can combine positional and keyword arguments, but positional arguments *must* come before keyword arguments.  (e.g., `my_function(10, y=20)`)

**IV. Default Arguments**

*   **Definition:** Parameters in a function definition that are assigned a default value.
    *   **Parameters with default values:**
        *   A default value is assigned to a parameter in the function definition using the equals sign (=).
        *   Example: `def my_function(x, y=0): ...` (y has a default value of 0)
        *   Default parameters should be placed at the end of the parameter list (after required parameters).

    *   **Usage when argument is not provided:**
        *   If the corresponding argument is not provided in the function call, the default value is used.
        *   If the argument *is* provided, the provided value overrides the default.
        *   Example:
            *   `my_function(5)`  (x becomes 5, y remains 0)
            *   `my_function(5, 10)` (x becomes 5, y becomes 10)

**V. Variable-Length Arguments (*args and **kwargs)**

*   **Definition:** Allows a function to accept a variable number of arguments.
    *   **`*args` (arbitrary positional arguments as tuple):**
        *   `*args` collects any extra positional arguments into a tuple.
        *   The name `args` is a convention; any valid variable name preceded by an asterisk (*) will work.
        *   Useful when you don't know in advance how many positional arguments a function will receive.
        *   Example: `def my_function(x, *args): ...`
        *   Inside the function, `args` is a tuple containing the extra positional arguments.
        *   `my_function(1, 2, 3, 4)` (x becomes 1, args becomes (2, 3, 4))

    *   **`**kwargs` (arbitrary keyword arguments as dictionary):**
        *   `**kwargs` collects any extra keyword arguments into a dictionary.
        *   The name `kwargs` is a convention; any valid variable name preceded by two asterisks (**) will work.
        *   Useful when you don't know in advance what keyword arguments a function will receive.
        *   Example: `def my_function(x, **kwargs): ...`
        *   Inside the function, `kwargs` is a dictionary containing the extra keyword arguments.
        *   `my_function(1, name="Alice", age=30)` (x becomes 1, kwargs becomes {'name': 'Alice', 'age': 30})

*   **Order of parameters:** When using all types of arguments, the typical order is:
    1.  Required positional arguments
    2.  Default arguments
    3.  `*args`
    4.  `**kwargs`

This breakdown should provide a good overview of function arguments and parameters, including the different types and how they are used. Remember to practice using these concepts in code to solidify your understanding!


## {'name': 'Return Values', 'subtopics': [{'name': 'The `return` Statement', 'subsubtopics': [{'name': 'Syntax and purpose'}, {'name': 'Returning single vs. multiple values (tuples)'}]}, {'name': 'Returning `None`', 'subsubtopics': [{'name': 'Implicit return when no `return` statement'}]}, {'name': 'Using Return Values', 'subsubtopics': [{'name': 'Assigning return values to variables'}, {'name': 'Using return values in expressions'}]}]}

Okay, here are notes organized by topic and subtopic, based on your provided structure regarding "Return Values":

**I. Return Values**

   *  **Definition:** The data a function sends back to the caller after it finishes executing. This allows functions to perform computations and provide results for use elsewhere in the program.

   **A. The `return` Statement**

      *   **1. Syntax and Purpose:**
          *   **Syntax:** `return [expression]`
          *   **Purpose:**
              *   Specifies the value that the function will return.
              *   Immediately terminates the function's execution and returns control to the caller.  Anything after the `return` statement in the function will *not* be executed (unless within a `finally` block).
              *   If no expression is provided after `return`, it implicitly returns `None`.

      *   **2. Returning Single vs. Multiple Values (Tuples):**
          *   **Single Value:**  A function can return a single value of any data type (integer, string, list, etc.).
              *   Example: `return x * 2`
          *   **Multiple Values (Tuples):**  A function can effectively return multiple values by returning a tuple.
              *   Example: `return x, y, z`  (This implicitly creates a tuple)
              *   The caller can then unpack the tuple into separate variables.
              *   Example: `a, b, c = my_function()`
              *   Alternatively, you can explicitly return a tuple: `return (x, y, z)`
              *   Using tuples is a common and Pythonic way to return multiple related pieces of information.

   **B. Returning `None`**

      *   **1. Implicit return when no `return` statement:**
          *   If a function does not contain a `return` statement, or if it contains a `return` statement without an expression, it implicitly returns `None`.
          *   `None` represents the absence of a value.
          *   It's often used to indicate that a function performed an action but doesn't have a meaningful value to return.
          *   Example: A function that prints something to the console might not need to return anything other than `None`.

   **C. Using Return Values**

      *   **1. Assigning return values to variables:**
          *   The most common way to use a return value is to assign it to a variable.
          *   Example:  `result = my_function()`
          *   The variable `result` now holds the value returned by `my_function()`.  You can then use `result` in subsequent code.

      *   **2. Using return values in expressions:**
          *   Return values can be directly used within expressions.
          *   Example: `final_value = my_function() + 10`
          *   The return value of `my_function()` is added to 10, and the result is assigned to `final_value`.
          *   Example: `print(my_function())`  The return value is directly passed as an argument to the `print()` function.

**Important Considerations/Best Practices:**

*   **Clarity:**  Make sure the return value's purpose is clear and well-documented.
*   **Consistency:**  If a function can return different types of values under different conditions, carefully consider the design and make sure the logic is easy to follow.  Raising exceptions might be a better alternative in some cases.
*   **Error Handling:** Consider returning special values (or raising exceptions) to indicate errors or exceptional conditions within the function.
*   **Side Effects:** Ideally, functions should primarily return values based on their inputs. Minimize side effects (e.g., modifying global variables, printing to the console) within functions that are intended to return values. If a function's primary purpose *is* a side effect, returning `None` might be appropriate.


## {'name': 'Scope and Lifetime of Variables', 'subtopics': [{'name': 'Local Scope', 'subsubtopics': [{'name': 'Variables defined inside a function'}, {'name': 'Accessibility and lifetime'}]}, {'name': 'Global Scope', 'subsubtopics': [{'name': 'Variables defined outside any function'}, {'name': 'Accessibility and lifetime'}]}, {'name': 'The `global` Keyword', 'subsubtopics': [{'name': 'Modifying global variables within a function'}]}, {'name': 'The `nonlocal` Keyword', 'subsubtopics': [{'name': 'Accessing variables in the nearest enclosing scope (nested functions)'}]}]}

## Scope and Lifetime of Variables

**I. Local Scope**

*   Variables defined within a specific block of code (usually a function).

    *   **Variables defined inside a function:**
        *   These variables are only accessible within the function where they are defined.
        *   Other parts of the program (outside the function) cannot directly access them.

    *   **Accessibility and lifetime:**
        *   **Accessibility:**  Only accessible within the function's body.
        *   **Lifetime:** Exists only while the function is executing.  Memory is allocated when the function is called and deallocated when the function returns.  The variable's value is lost after the function completes.

**II. Global Scope**

*   Variables defined outside any function or class definition.

    *   **Variables defined outside any function:**
        *   These variables are accessible from anywhere in the code (inside functions, outside functions, etc.).

    *   **Accessibility and lifetime:**
        *   **Accessibility:** Accessible from anywhere in the program.
        *   **Lifetime:** Exists for the entire duration of the program's execution. Memory is allocated when the program starts and deallocated when the program terminates.

**III. The `global` Keyword**

*   Used to explicitly indicate that a variable inside a function refers to a global variable.

    *   **Modifying global variables within a function:**
        *   Without `global`, assigning to a variable with the same name as a global variable within a function will create a *new local variable*.
        *   Using `global var_name` inside a function allows you to directly modify the value of the global variable `var_name`.  Any changes made inside the function will affect the global variable's value.

**IV. The `nonlocal` Keyword**

*   Used in nested functions to access variables in the nearest enclosing scope that is *not* the global scope.

    *   **Accessing variables in the nearest enclosing scope (nested functions):**
        *   Without `nonlocal`, assigning to a variable with the same name as a variable in an enclosing function creates a new local variable in the inner function.
        *   `nonlocal var_name` allows you to directly access and modify the variable `var_name` in the closest (but not global) enclosing scope. This affects the variable in the outer function.  Useful when you need to modify variables in outer functions from within inner functions.


## {'name': 'Lambda Functions (Anonymous Functions)', 'subtopics': [{'name': 'Syntax of Lambda Functions', 'subsubtopics': [{'name': 'lambda arguments: expression'}]}, {'name': 'Use Cases for Lambda Functions', 'subsubtopics': [{'name': 'With `map()`, `filter()`, and `sorted()`'}, {'name': 'As simple callbacks'}]}, {'name': 'Advantages and Disadvantages', 'subsubtopics': [{'name': 'Conciseness vs. readability'}]}]}

## Lambda Functions (Anonymous Functions) - Notes

**Definition:** Small, anonymous functions defined inline. Primarily used for simple operations where a full function definition is unnecessary.

**I. Syntax of Lambda Functions**

*   **`lambda arguments: expression`**

    *   **`lambda` keyword:**  Identifies the function as a lambda function.
    *   **`arguments`:**  Comma-separated list of input arguments (similar to regular function arguments). Can be zero or more arguments.
    *   **`:` (colon):** Separates arguments from the expression.
    *   **`expression`:**  A single expression that is evaluated and returned. *This is the key difference from regular functions; lambdas can only contain a single expression.*  Cannot contain statements (e.g., `if`, `for`, `while`).  Can include operators, function calls, and conditional expressions.

    *Example:* `lambda x: x * 2` (Takes an argument `x` and returns its double)

**II. Use Cases for Lambda Functions**

*   **With `map()`, `filter()`, and `sorted()`:**

    *   **`map(function, iterable)`:** Applies a function to each item in an iterable and returns an iterator of the results. Lambda functions are frequently used as the `function` argument for concise transformations.
        *   *Example:* `list(map(lambda x: x**2, [1, 2, 3]))`  (Squares each element in the list)
    *   **`filter(function, iterable)`:** Filters an iterable based on a boolean function.  Only elements for which the `function` returns `True` are included in the result.  Lambda functions are ideal for creating simple filtering conditions.
        *   *Example:* `list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5, 6]))` (Filters for even numbers)
    *   **`sorted(iterable, key=function)`:** Sorts an iterable based on a `key` function. The `key` function is applied to each element to determine the sorting criteria.  Lambda functions provide a quick way to define custom sorting logic.
        *   *Example:* `sorted(['apple', 'banana', 'cherry'], key=lambda x: len(x))` (Sorts by string length)
*   **As simple callbacks:**

    *   Lambda functions can be used as callbacks in GUI frameworks or event-driven programming, where you need a small function to execute in response to an event.  They are useful when the callback logic is short and doesn't warrant a named function.
    *   *Example:*  Button click handler in a GUI application that just prints a message.

**III. Advantages and Disadvantages**

*   **Conciseness vs. readability:**

    *   **Advantages (Conciseness):**
        *   More compact code, especially for simple operations.
        *   Avoids the need to define and name a function that is only used once.
        *   Can improve readability *when the lambda expression is short and straightforward*.

    *   **Disadvantages (Readability):**
        *   Can become difficult to understand if the expression is complex.
        *   Limited to single expressions, which restricts the complexity of the logic.
        *   Debugging can be harder since lambdas are anonymous.
        *   Overuse can reduce code readability, making it harder for others (or yourself later) to understand the code.

    *   **General Guideline:** Use lambda functions for short, simple operations. If the logic is more complex, define a regular function with a clear name.  Prioritize readability over extreme brevity. Avoid extremely long/nested lambda functions.


## {'name': 'Docstrings and Function Annotations', 'subtopics': [{'name': 'Docstrings', 'subsubtopics': [{'name': 'Syntax and conventions (triple quotes)'}, {'name': 'Documenting arguments, return values, and exceptions'}, {'name': 'Accessing docstrings using `help()` or `__doc__`'}]}, {'name': 'Function Annotations', 'subsubtopics': [{'name': 'Syntax for adding annotations'}, {'name': 'Type hinting (with tools like MyPy)'}]}]}

## Docstrings and Function Annotations

This document outlines docstrings and function annotations, providing details on their syntax, usage, and benefits.

**I. Docstrings (Documentation Strings)**

*   **Definition:** Multiline strings used to document code, particularly functions, classes, modules, and methods. They explain what the code does.

    *   **Purpose:**
        *   Improved code readability and maintainability.
        *   Automatic documentation generation.
        *   Help newcomers understand the codebase.

*   **A. Syntax and conventions (triple quotes)**

    *   Enclosed in triple single quotes (`'''Docstring'''`) or triple double quotes (`"""Docstring"""`).  Double quotes are generally preferred.
    *   Placed immediately after the function/class/module header.
    *   First line should be a concise summary of the object's purpose.
    *   Leave a blank line after the summary.
    *   Subsequent paragraphs provide more detailed explanation.
    *   Consistent formatting is crucial.  Follow PEP 257 guidelines.

    *   **Example:**

        ```python
        def my_function(x, y):
            """
            This function adds two numbers together.

            Args:
                x: The first number.
                y: The second number.

            Returns:
                The sum of x and y.
            """
            return x + y
        ```

*   **B. Documenting arguments, return values, and exceptions**

    *   **Arguments:**  Describe each argument's purpose, expected type, and any default values.  Common formats include:

        *   *reStructuredText (Sphinx)*: Uses `:param arg_name: Description of the argument.`
        *   *Google Style*: Uses `Args: arg_name (type): Description of the argument.`
        *   *NumPy Style*: Uses `Parameters ---------- arg_name : type Description of the argument.`

    *   **Return Values:** Describe the value returned by the function, including its type and meaning.  Use similar formatting as arguments:

        *   *reStructuredText (Sphinx)*: Uses `:return: Description of the return value.`  Also consider using `:rtype: type` to specify the type.
        *   *Google Style*: Uses `Returns: type: Description of the return value.`
        *   *NumPy Style*: Uses `Returns ------- type Description of the return value.`

    *   **Exceptions:** Document any exceptions that the function might raise and under what conditions.

        *   *reStructuredText (Sphinx)*: Uses `:raises ExceptionType: Description of when the exception is raised.`
        *   *Google Style*: Uses `Raises: ExceptionType: Description of when the exception is raised.`
        *   *NumPy Style*: Uses `Raises ------ ExceptionType Description of when the exception is raised.`

    *   **Example (reStructuredText):**

        ```python
        def divide(x, y):
            """Divides x by y.

            :param x: The numerator.
            :type x: float
            :param y: The denominator.
            :type y: float
            :raises ZeroDivisionError: If y is zero.
            :return: The result of the division.
            :rtype: float
            """
            if y == 0:
                raise ZeroDivisionError("Cannot divide by zero.")
            return x / y
        ```

*   **C. Accessing docstrings using `help()` or `__doc__`**

    *   `help(object)`:  Built-in function that displays the docstring of an object (function, class, module, etc.) in a more readable format.
    *   `object.__doc__`:  A special attribute that directly stores the docstring as a string.

    *   **Example:**

        ```python
        def example_function():
            """This is an example function."""
            pass

        help(example_function)  # Displays the docstring formatted
        print(example_function.__doc__)  # Prints the raw docstring string
        ```

**II. Function Annotations (Type Hints)**

*   **Definition:** Metadata attached to function parameters and return values.  They are hints, not strict type enforcement by the Python interpreter itself (until recently with stricter modes).

    *   **Purpose:**
        *   Improved code readability.
        *   Static type checking (using tools like MyPy) to catch errors early.
        *   Enhanced IDE support (code completion, error highlighting).
        *   Runtime introspection for other purposes.

*   **A. Syntax for adding annotations**

    *   **Parameter Annotations:** `def function_name(param_name: type_hint):`
    *   **Return Value Annotation:** `def function_name(param_name) -> type_hint:`
    *   Annotations can be any valid Python expression, but types are the most common use case.
    *   Use the `typing` module for more complex types (e.g., `List`, `Dict`, `Union`, `Optional`).

    *   **Examples:**

        ```python
        def greet(name: str) -> str:
            return "Hello, " + name

        from typing import List

        def process_data(data: List[int]) -> List[float]:
            return [float(x) for x in data]

        from typing import Optional

        def find_user(user_id: int) -> Optional[dict]:
            # Returns a dictionary if found, otherwise None
            pass
        ```

*   **B. Type hinting (with tools like MyPy)**

    *   **MyPy:**  A static type checker for Python.  It analyzes your code and flags type errors without actually running the code.

    *   **Usage:**
        1.  Install: `pip install mypy`
        2.  Run: `mypy your_file.py`
        3.  MyPy will report any type inconsistencies it finds.

    *   **Benefits of MyPy:**
        *   Catches type-related bugs earlier in the development process.
        *   Improves code reliability.
        *   Enforces consistent type usage across a codebase.

    *   **Example:**

        ```python
        # example.py
        def add(x: int, y: int) -> str:  # Incorrect return type annotation
            return x + y

        # Run: mypy example.py
        # Output: example.py:2: error: Incompatible return value type (got "int", expected "str")

        ```

    *   **Note:**  Type hints are advisory. Python itself doesn't enforce them at runtime by default. MyPy and other type checkers are needed to actually verify types.  Python 3.9 and later have more strict type checking modes you can enable via command line options.
